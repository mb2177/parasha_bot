#!/usr/bin/env python3
import os
import logging
import json
import asyncio
from datetime import datetime, time
from zoneinfo import ZoneInfo
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å nest_asyncio –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ event loop –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –∫–ª—é—á–∏ API Telegram –∏ OpenAI –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
TELEGRAM_BOT_TOKEN = '7959503859:AAGaokGubdGPHRSivp6n11R7gNwuywX7Q-M'
OPENAI_API_KEY     = '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'
USER_LANG_FILE     = 'user_langs.json'
MESSAGE_LOG_FILE   = 'message_logs.json'
# -----------------------------------------------------------------------------

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
user_langs   = {}
message_logs = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
def load_user_langs():
    global user_langs
    try:
        with open(USER_LANG_FILE, 'r', encoding='utf-8') as f:
            user_langs = json.load(f)
    except FileNotFoundError:
        user_langs = {}

def save_user_langs():
    with open(USER_LANG_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_langs, f, ensure_ascii=False, indent=2)

def load_message_logs():
    global message_logs
    try:
        with open(MESSAGE_LOG_FILE, 'r', encoding='utf-8') as f:
            message_logs = json.load(f)
    except FileNotFoundError:
        message_logs = {}

def save_message_logs():
    with open(MESSAGE_LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(message_logs, f, ensure_ascii=False, indent=2)

def log_message(user_id: str, text: str, msg_type: str):
    entry = {
        'timestamp': datetime.now(ZoneInfo('Asia/Dubai')).isoformat(),
        'type': msg_type,
        'text': text
    }
    message_logs.setdefault(user_id, []).append(entry)
    save_message_logs()

# --- –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
TEXTS = {
    'ru': {
        'language_prompt': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'language_set'   : '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {label}',
        'menu'           : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'summary_prefix' : 'üìñ –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ –≥–ª–∞–≤—É:\n',
        'full_prefix'    : 'üìú –ü–æ–ª–Ω–∞—è –≥–ª–∞–≤–∞:\n',
        'error'          : '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    },
    'en': {
        'language_prompt': 'Choose your language:',
        'language_set'   : 'Language set to: {label}',
        'menu'           : 'Choose an action:',
        'summary_prefix' : 'üìñ Briefly Parshah:\n',
        'full_prefix'    : 'üìú Full Parshah:\n',
        'error'          : '‚ö†Ô∏è An error occurred. Please try again later.'
    },
    'he': {
        'language_prompt': '◊ë◊ó◊® ◊©◊§◊î:',
        'language_set'   : '◊î◊©◊§◊î ◊î◊ï◊í◊ì◊®◊î ◊ú: {label}',
        'menu'           : '◊ë◊ó◊® ◊§◊¢◊ï◊ú◊î:',
        'summary_prefix' : 'üìñ ◊™◊ß◊¶◊ô◊® ◊§◊®◊©◊î:\n',
        'full_prefix'    : 'üìú ◊î◊§◊®◊©◊î ◊î◊û◊ú◊ê◊î:\n',
        'error'          : '‚ö†Ô∏è ◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.'
    }
}

LANG_LABELS = {'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'en': 'üá¨üáß English', 'he': 'üáÆüá± ◊¢◊ë◊®◊ô◊™'}

def get_text(key: str, lang: str, **kwargs) -> str:
    return TEXTS.get(lang, TEXTS['en'])[key].format(**kwargs)

# --- –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI ---
async def generate_summary(lang: str) -> str:
    sys_map = {
        'ru': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¢–æ—Ä–µ, –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.',
        'en': 'You are an expert on the Torah; give a simple summary of this week‚Äôs portion.',
        'he': '◊ê◊™◊î ◊û◊ï◊û◊ó◊î ◊ú◊™◊ï◊®◊î; ◊õ◊™◊ï◊ë ◊™◊ß◊¶◊ô◊® ◊§◊©◊ï◊ò ◊©◊ú ◊î◊§◊®◊©◊î ◊î◊©◊ë◊ï◊¢◊ô◊™.'
    }
    prompt_map = {
        'ru': '–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–π –Ω–µ–¥–µ–ª—å–Ω–æ–π –≥–ª–∞–≤—ã –¢–æ—Ä—ã.',
        'en': 'Write a simple summary of this week‚Äôs Torah portion.',
        'he': '◊õ◊™◊ï◊ë ◊™◊ß◊¶◊ô◊® ◊ß◊¶◊® ◊©◊ú ◊î◊§◊®◊©◊î ◊î◊©◊ë◊ï◊¢◊ô◊™.'
    }
    resp = openai_client.chat.completions.create(
        model='gpt-4o',
        messages=[
            {'role': 'system', 'content': sys_map.get(lang, sys_map['en'])},
            {'role': 'user', 'content': prompt_map.get(lang, prompt_map['en'])}
        ],
        temperature=0.7,
    )
    return resp.choices[0].message.content.strip()

async def generate_full_text(lang: str) -> str:
    text_map = {
        'ru': '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π –≥–ª–∞–≤—ã –¢–æ—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
        'en': 'Provide the full text of this week‚Äôs Torah portion in English.',
        'he': '◊õ◊™◊ï◊ë ◊ê◊™ ◊î◊ò◊ß◊°◊ò ◊î◊û◊ú◊ê ◊©◊ú ◊î◊§◊®◊©◊î ◊î◊©◊ë◊ï◊¢◊ô◊™ ◊ë◊¢◊ë◊®◊ô◊™.'
    }
    resp = openai_client.chat.completions.create(
        model='gpt-4o',
        messages=[
            {'role': 'system', 'content': text_map.get(lang, text_map['en'])},
            {'role': 'user', 'content': text_map.get(lang, text_map['en'])}
        ],
        temperature=0.5,
        max_tokens=4096,
    )
    return resp.choices[0].message.content.strip()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(LANG_LABELS['ru'], callback_data='lang|ru')],
        [InlineKeyboardButton(LANG_LABELS['en'], callback_data='lang|en')],
        [InlineKeyboardButton(LANG_LABELS['he'], callback_data='lang|he')]
    ]
    await update.message.reply_text(
        get_text('language_prompt', 'en'),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def lang_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data.split('|', 1)[1]
    user_id = str(query.from_user.id)
    user_langs[user_id] = lang
    save_user_langs()

    await query.edit_message_text(get_text('language_set', lang, label=LANG_LABELS[lang]))
    menu_buttons = [[KeyboardButton("üìö –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ –≥–ª–∞–≤—É"), KeyboardButton("üìú –ü–æ–ª–Ω–∞—è –≥–ª–∞–≤–∞")],[KeyboardButton("/language")]]
    await context.bot.send_message(chat_id=query.from_user.id, text=get_text('menu', lang), reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True))

async def brief_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id, lang = str(update.effective_user.id), user_langs.get(str(update.effective_user.id), 'en')
    try:
        text = get_text('summary_prefix', lang) + (await generate_summary(lang))
        await update.message.reply_text(text)
        log_message(user_id, text, 'manual')
    except Exception as e:
        logger.error(f"Error in brief_handler: {e}")
        await update.message.reply_text(get_text('error', lang))

async def full_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id, lang = str(update.effective_user.id), user_langs.get(str(update.effective_user.id), 'en')
    try:
        full = await generate_full_text(lang)
        prefix = get_text('full_prefix', lang)
        for i in range(0, len(full), 4000): await update.message.reply_text((prefix if i==0 else '') + full[i:i+4000])
        if len(full) > 4000: await update.message.reply_text('‚úÖ –¢–µ–∫—Å—Ç –±—ã–ª –¥–ª–∏–Ω–Ω—ã–º –∏ —Ä–∞–∑–±–∏—Ç')
        log_message(user_id, prefix + full, 'manual')
    except Exception as e:
        logger.error(f"Error in full_handler: {e}")
        await update.message.reply_text(get_text('error', lang))

async def broadcast_summary(context: ContextTypes.DEFAULT_TYPE):
    for uid, lang in user_langs.items():
        try:
            text = get_text('summary_prefix', lang) + (await generate_summary(lang))
            await context.bot.send_message(chat_id=int(uid), text=text)
            log_message(uid, text, 'auto')
        except Exception as e:
            logger.error(f"Broadcast error for {uid}: {e}")

def schedule_jobs(job_queue): job_queue.run_daily(broadcast_summary, time=time(12,20, tzinfo=ZoneInfo('Asia/Dubai')))

async def main():
    load_user_langs(); load_message_logs()
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).post_init(lambda a: a.bot.set_my_commands([BotCommand('start','Start'),BotCommand('language','Change language'),BotCommand('brief','Briefly'),BotCommand('full','Full')])).build()
    app.add_handler(CommandHandler('start', start)); app.add_handler(CommandHandler('language', start))
    app.add_handler(CallbackQueryHandler(lang_callback, pattern=r'^lang\|'))
    app.add_handler(CommandHandler('brief', brief_handler)); app.add_handler(CommandHandler('full', full_handler))
    app.add_handler(MessageHandler(filters.TEXT("üìö –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ –≥–ª–∞–≤—É"), brief_handler)); app.add_handler(MessageHandler(filters.TEXT("üìú –ü–æ–ª–Ω–∞—è –≥–ª–∞–≤–∞"), full_handler))
    schedule_jobs(app.job_queue)
    await app.run_polling()

if __name__ == '__main__': asyncio.run(main())
