from telegram.ext import ApplicationBuilder, CommandHandler, 
CallbackQueryHandler, ContextTypes
sqimport os
import logging
import asyncio
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, 
CallbackQueryHandler, ContextTypes
from openai import OpenAI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

# --- Конфигурация ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
LANG_FILE = "user_langs.json"

# --- Инициализация ---
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", 
level=logging.INFO)
bot_app = None
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_langs = {}

# --- Работа с языковыми настройками пользователей ---
def load_user_langs():
    global user_langs
    if os.path.exists(LANG_FILE):
        with open(LANG_FILE, 'r', encoding='utf-8') as f:
            user_langs = json.load(f)
    else:
        user_langs = {}

def save_user_langs():
    with open(LANG_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_langs, f, ensure_ascii=False, indent=2)

# --- Хэндлеры ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        InlineKeyboardButton("Русский", callback_data="lang|ru"),
        InlineKeyboardButton("English", callback_data="lang|en"),
        InlineKeyboardButton("עברית", callback_data="lang|he"),
    ]
    keyboard = InlineKeyboardMarkup([buttons])
    await update.message.reply_text(
        "Выберите язык / Choose your language / בחר שפה:",
        reply_markup=keyboard
    )

async def lang_callback(update: Update, context: 
ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    lang = update.callback_query.data.split("|")[1]
    user_id = str(update.effective_user.id)
    user_langs[user_id] = lang
    save_user_langs()
    labels = {'ru': 'Русский', 'en': 'English', 'he': 'עברית'}
    await update.callback_query.edit_message_text(f"Язык установлен: 
{labels.get(lang)}")

# --- Генерация контента ---
async def generate_parasha_summary(lang: str) -> str:
    if lang == 'en':
        system = "You are an expert on the Torah, explaining its weekly 
portion simply in English."
        prompt = "Write a simple summary of this week's Torah portion for 
those unfamiliar with religious texts."
    elif lang == 'he':
        system = "אתה מומחה לתורה ומסביר את הפרשה השבועית בפשטות בעברית."
        prompt = "כתוב תקציר פשוט של הפרשה השבועית עבור מי שלא מכיר טקסטים 
דתיים."
    else:
        system = "Ты эксперт по еврейским текстам и умеешь объяснять их 
простым языком."
        prompt = "Напиши простым языком краткий пересказ текущей недельной 
главы Торы."
    resp = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": system}, {"role": "user", 
"content": prompt}],
        temperature=0.7
    )
    return resp.choices[0].message.content.strip()

async def generate_midweek_reflection(lang: str) -> str:
    if lang == 'en':
        system = "You are a wise mentor and list reflection points clearly 
in English."
        prompt = "List key lessons and reflection points from this week's 
Torah portion midweek."
    elif lang == 'he':
        system = "אתה מורה חכם ורושם נקודות חשיבה ברורות בעברית."
        prompt = "רשום נקודות לימוד מהפרשה השבועית באמצע השבוע."
    else:
        system = "Ты мудрый наставник, формулирующий мысли ясно."
        prompt = "Напиши несколько пунктов: чему нас учит текущая 
недельная глава Торы."
    resp = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": system}, {"role": "user", 
"content": prompt}],
        temperature=0.7
    )
    return resp.choices[0].message.content.strip()

async def generate_shabbat_toast(lang: str) -> str:
    if lang == 'en':
        system = "You are familiar with Shabbat traditions and craft warm 
toasts in English."
        prompt = "Create a short, heartfelt Shabbat toast based on this 
week's Torah portion."
    elif lang == 'he':
        system = "אתה מכיר את מסורת השבת ויוצר ברכה חמה בעברית."
        prompt = "כתוב ברכת שבת קצרה על פי הפרשה השבועית."
    else:
        system = "Ты знаешь традиции шаббата и создаешь теплые тосты."
        prompt = "Подготовь короткий теплый тост для шаббата на основе 
текущей недельной главы Торы."
    resp = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": system}, {"role": "user", 
"content": prompt}],
        temperature=0.7
    )
    return resp.choices[0].message.content.strip()

# --- Рассылка по расписанию ---
async def send_weekly_summary():
    for user_id, lang in user_langs.items():
        text = await generate_parasha_summary(lang)
        await bot_app.bot.send_message(chat_id=int(user_id), text=f"📖 
Пересказ главы:\n{text}")

async def send_midweek_reflection():
    for user_id, lang in user_langs.items():
        text = await generate_midweek_reflection(lang)
        await bot_app.bot.send_message(chat_id=int(user_id), text=f"💡 
Чему нас учит глава:\n{text}")

async def send_shabbat_toast():
    for user_id, lang in user_langs.items():
        text = await generate_shabbat_toast(lang)
        await bot_app.bot.send_message(chat_id=int(user_id), text=f"🥂 
Тост к шаббату:\n{text}")

# --- Запуск бота и планировщика ---
async def main():
    global bot_app
    load_user_langs()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot_app = app

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", start))
    app.add_handler(CallbackQueryHandler(lang_callback, 
pattern=r"^lang\|"))

    scheduler = AsyncIOScheduler(timezone="Asia/Dubai")
    scheduler.add_job(lambda: asyncio.create_task(send_weekly_summary()), 
CronTrigger(day_of_week="mon", hour=10, minute=0))
    scheduler.add_job(lambda: 
asyncio.create_task(send_midweek_reflection()), 
CronTrigger(day_of_week="wed", hour=10, minute=0))
    scheduler.add_job(lambda: asyncio.create_task(send_shabbat_toast()), 
CronTrigger(day_of_week="fri", hour=11, minute=0))
    scheduler.start()

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

